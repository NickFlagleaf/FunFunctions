devtools::install_github("NickFlagleaf/FunFunctions")
devtools::install_github("NickFlagleaf/FunFunctions")
library(FunFunctions)
#' @param jitter.fact Jitter factor. Numeric. Higher values will make for variable jittering. Default is 10
#' @param jitteration Number of jitter iterations to repeat. Higher number will make points further apart. Default is 200.
#' @param min.dist The minimum distance that points can be apart. Default is 1
#'
#' @return A data frame of new x and y coordinates that should be further apart.
#' @export
#'
#' @examples
#'
#'
jit.repel<-function(x,y,jitter.fact=10,jitteration=200,min.dist=1){
set<-list()
start.dist<-dist(scale(cbind(x,y))) #get a distance matrix among the points
is.too.close<-apply(as.matrix(start.dist),2,FUN = function(d) min(d[d>0]))<min.dist #work out which points are too close to another
for (j in 1:100) {
set[[j]]<-cbind(jitter(x,factor = jitter.fact),jitter(y,factor = jitter.fact)) #make a load of different jittered coordinates
}
mins<-lapply(set, FUN = function(s) min(dist(scale(s)))) #find the one with the largest minimum distance
out<-set[[which.max(mins)]]
print("Repelling...")
for (n in 1:jitteration) { #do a load of iterations increase the minimum distance
cat("|")
set<-list()
for (j in 1:100) {
set[[j]]<-cbind(out[,1],jitter(out[,2],factor = jitter.fact)) #Only on y axis?
}
mins<-lapply(set, FUN = function(s) min(c(dist(scale(s))),na.rm = T))
out<-set[[which.max(mins)]]
}
out[!is.too.close,]<-cbind(x,y)[!is.too.close,] #replace the points that aren't too close together with the originals
return(out) #get results
}
x<-rnorm(1:100)
y<-rnorm(1:100)
new.coords<-jit.repel(x,y)
plot(x,y)
labs<-paste(1:100,month.abb)
labs
text(new.coords,labels = labs,pos=3)
text(new.coords,labels = labs,pos=3,xpd=T)
#' @param jitter.fact Jitter factor. Numeric. Higher values will make for variable jittering. Default is 10
#' @param jitteration Number of jitter iterations to repeat. Higher number will make points further apart. Default is 200.
#' @param min.dist The minimum distance that points can be apart. Default is 1
#'
#' @return A data frame of new x and y coordinates that should be further apart.
#' @export
#'
#' @examples
#'
#'
jit.repel<-function(x,y,jitter.fact=10,jitteration=200,min.dist=1){
set<-list()
start.dist<-dist(scale(cbind(x,y))) #get a distance matrix among the points
is.too.close<-apply(as.matrix(start.dist),2,FUN = function(d) min(d[d>0]))<min.dist #work out which points are too close to another
for (j in 1:100) {
set[[j]]<-cbind(jitter(x,factor = jitter.fact),jitter(y,factor = jitter.fact)) #make a load of different jittered coordinates
}
mins<-lapply(set, FUN = function(s) min(dist(scale(s)))) #find the one with the largest minimum distance
out<-set[[which.max(mins)]]
print("Repelling...")
for (n in 1:jitteration) { #do a load of iterations increase the minimum distance
cat("|")
set<-list()
for (j in 1:100) {
set[[j]]<-cbind(out[,1],jitter(out[,2],factor = jitter.fact)) #Only on y axis?
}
mins<-lapply(set, FUN = function(s) min(c(dist(scale(s))),na.rm = T))
out<-set[[which.max(mins)]]
}
out[!is.too.close,]<-cbind(x,y)[!is.too.close,] #replace the points that aren't too close together with the originals
return(out) #get results
}
x<-rnorm(1:100)
y<-rnorm(1:100)
labs<-paste(1:100,month.abb)
#' @param jitter.fact Jitter factor. Numeric. Higher values will make for variable jittering. Default is 10
#' @param jitteration Number of jitter iterations to repeat. Higher number will make points further apart. Default is 200.
#' @param min.dist The minimum distance that points can be apart. Default is 1
#'
#' @return A data frame of new x and y coordinates that should be further apart.
#' @export
#'
#' @examples
#'
#'
jit.repel<-function(x,y,jitter.fact=20,jitteration=200,min.dist=1){
set<-list()
start.dist<-dist(scale(cbind(x,y))) #get a distance matrix among the points
is.too.close<-apply(as.matrix(start.dist),2,FUN = function(d) min(d[d>0]))<min.dist #work out which points are too close to another
for (j in 1:100) {
set[[j]]<-cbind(jitter(x,factor = jitter.fact),jitter(y,factor = jitter.fact)) #make a load of different jittered coordinates
}
mins<-lapply(set, FUN = function(s) min(dist(scale(s)))) #find the one with the largest minimum distance
out<-set[[which.max(mins)]]
print("Repelling...")
for (n in 1:jitteration) { #do a load of iterations increase the minimum distance
cat("|")
set<-list()
for (j in 1:100) {
set[[j]]<-cbind(out[,1],jitter(out[,2],factor = jitter.fact)) #Only on y axis?
}
mins<-lapply(set, FUN = function(s) min(c(dist(scale(s))),na.rm = T))
out<-set[[which.max(mins)]]
}
out[!is.too.close,]<-cbind(x,y)[!is.too.close,] #replace the points that aren't too close together with the originals
return(out) #get results
}
x<-rnorm(1:100)
y<-rnorm(1:100)
labs<-paste(1:100,month.abb)
new.coords<-jit.repel(x,y)
plot(x,y)
text(new.coords,labels = labs,pos=3,xpd=T)
x<-rnorm(1:10)
y<-rnorm(1:10)
labs<-paste(1:10,month.abb)
new.coords<-jit.repel(x,y)
plot(x,y)
text(new.coords,labels = labs,pos=3,xpd=T)
labs
plot(x,y)
text(new.coords,labels = labs,pos=3,xpd=T)
new.coords
#' @param jitter.fact Jitter factor. Numeric. Higher values will make for variable jittering. Default is 10
#' @param jitteration Number of jitter iterations to repeat. Higher number will make points further apart. Default is 200.
#' @param min.dist The minimum distance that points can be apart. Default is 1
#'
#' @return A data frame of new x and y coordinates that should be further apart.
#' @export
#'
#' @examples
#'
#'
jit.repel<-function(x,y,jitter.fact=10,jitteration=200,min.dist=1){
set<-list()
start.dist<-dist(scale(cbind(x,y))) #get a distance matrix among the points
is.too.close<-apply(as.matrix(start.dist),2,FUN = function(d) min(d[d>0]))<min.dist #work out which points are too close to another
for (j in 1:100) {
set[[j]]<-cbind(jitter(x,factor = jitter.fact),jitter(y,factor = jitter.fact)) #make a load of different jittered coordinates
}
mins<-lapply(set, FUN = function(s) min(dist(scale(s)))) #find the one with the largest minimum distance
out<-set[[which.max(mins)]]
print("Repelling...")
for (n in 1:jitteration) { #do a load of iterations increase the minimum distance
cat("|")
set<-list()
for (j in 1:100) {
set[[j]]<-cbind(out[,1],jitter(out[,2],factor = jitter.fact)) #Only on y axis?
}
mins<-lapply(set, FUN = function(s) min(c(dist(scale(s))),na.rm = T))
out<-set[[which.max(mins)]]
}
out[!is.too.close,]<-cbind(x,y)[!is.too.close,] #replace the points that aren't too close together with the originals
return(out) #get results
}
x<-rnorm(1:10)
y<-rnorm(1:10)
labs<-paste(1:10,month.abb)
new.coords<-jit.repel(x,y)
plot(x,y)
text(new.coords,labels = labs,pos=3,xpd=T)
jitter.fact=10
jitteration=200
min.dist=1
set<-list()
start.dist<-dist(scale(cbind(x,y))) #get a distance matrix among the points
start.dist
x
y
scale(cbind(x,y))
#' @param jitter.fact Jitter factor. Numeric. Higher values will make for variable jittering. Default is 10
#' @param jitteration Number of jitter iterations to repeat. Higher number will make points further apart. Default is 200.
#' @param min.dist The minimum distance that points can be apart. Default is 1
#'
#' @return A data frame of new x and y coordinates that should be further apart.
#' @export
#'
#' @examples
#'
#'
jit.repel<-function(x,y,jitter.fact=10,jitteration=200,min.dist=0.5){
set<-list()
start.dist<-dist(scale(cbind(x,y))) #get a distance matrix among the points
is.too.close<-apply(as.matrix(start.dist),2,FUN = function(d) min(d[d>0]))<min.dist #work out which points are too close to another
for (j in 1:100) {
set[[j]]<-cbind(jitter(x,factor = jitter.fact),jitter(y,factor = jitter.fact)) #make a load of different jittered coordinates
}
mins<-lapply(set, FUN = function(s) min(dist(scale(s)))) #find the one with the largest minimum distance
out<-set[[which.max(mins)]]
print("Repelling...")
for (n in 1:jitteration) { #do a load of iterations increase the minimum distance
cat("|")
set<-list()
for (j in 1:100) {
set[[j]]<-cbind(out[,1],jitter(out[,2],factor = jitter.fact)) #Only on y axis?
}
mins<-lapply(set, FUN = function(s) min(c(dist(scale(s))),na.rm = T))
out<-set[[which.max(mins)]]
}
out[!is.too.close,]<-cbind(x,y)[!is.too.close,] #replace the points that aren't too close together with the originals
return(out) #get results
}
x<-rnorm(1:10)
y<-rnorm(1:10)
labs<-paste(1:10,month.abb)
new.coords<-jit.repel(x,y)
plot(x,y)
text(new.coords,labels = labs,pos=3,xpd=T)
x
y
x<-rnorm(1:10,mean = 1,sd = 0.1)
y<-rnorm(1:10,mean = 100,sd = 5)
labs<-paste(1:10,month.abb)
new.coords<-jit.repel(x,y)
plot(x,y)
text(new.coords,labels = labs,pos=3,xpd=T)
arrows(x,y,new.coords[,1],new.coords[,2],
length = 0,xpd=T)
x<-rnorm(1:10,mean = 1,sd = 0.1)
y<-rnorm(1:10,mean = 100,sd = 5)
labs<-paste(1:10,month.abb)
new.coords<-jit.repel(x,y)
plot(x,y)
text(new.coords,labels = labs,pos=3,xpd=T)
arrows(x,y,new.coords[,1],new.coords[,2],
length = 0,xpd=T)
labs
labs<-paste(1:10,month.abb[1:10])
new.coords<-jit.repel(x,y)
plot(x,y)
text(new.coords,labels = labs,pos=3,xpd=T)
arrows(x,y,new.coords[,1],new.coords[,2],
length = 0,xpd=T)
labs<-paste(1:20,month.abb[1:20])
x<-rnorm(1:20,mean = 1,sd = 0.1)
y<-rnorm(1:20,mean = 100,sd = 5)
labs<-paste(1:20,month.abb[1:20])
new.coords<-jit.repel(x,y)
plot(x,y)
text(new.coords,labels = labs,pos=3,xpd=T)
arrows(x,y,new.coords[,1],new.coords[,2],
length = 0,xpd=T)
x<-rnorm(1:20,mean = 1,sd = 0.1)
y<-rnorm(1:20,mean = 100,sd = 5)
labs<-paste(1:20,month.abb[1:20])
new.coords<-jit.repel(x,y)
plot(x,y)
text(new.coords,labels = labs,pos=3,xpd=T)
arrows(x,y,new.coords[,1],new.coords[,2],
length = 0,xpd=T)
text(new.coords,labels = labs,xpd=T)
arrows(x,y,new.coords[,1],new.coords[,2],
length = 0,xpd=T)
plot(x,y)
text(new.coords,labels = labs,xpd=T)
arrows(x,y,new.coords[,1],new.coords[,2],
length = 0,xpd=T)
text(new.coords,labels = labs,xpd=T)
arrows(x,y,new.coords[,1],new.coords[,2],
length = 0,xpd=T)
month.abb[1:30]
labs<-paste(1:30,month.abb)
x<-rnorm(1:30,mean = 1,sd = 0.1)
y<-rnorm(1:30,mean = 100,sd = 5)
labs<-paste(1:30,month.abb)
new.coords<-jit.repel(x,y)
plot(x,y)
text(new.coords,labels = labs,xpd=T)
arrows(x,y,new.coords[,1],new.coords[,2],
length = 0,xpd=T)
plot(x,y)
arrows(x,y,new.coords[,1],new.coords[,2],
length = 0,xpd=T,col="grey")
text(new.coords,labels = labs,xpd=T)
arrows(x,y,new.coords[,1],new.coords[,2],
length = 0,xpd=T,col="grey50")
text(new.coords,labels = labs,xpd=T)
x<-rnorm(1:30,mean = 1,sd = 0.1)
y<-rnorm(1:30,mean = 100,sd = 5)
labs<-paste(1:30,month.abb)
new.coords<-jit.repel(x,y)
plot(x,y)
arrows(x,y,new.coords[,1],new.coords[,2],
length = 0,xpd=T,col="grey50")
text(new.coords,labels = labs,xpd=T)
x<-rnorm(1:40,mean = 1,sd = 0.1)
y<-rnorm(1:40,mean = 100,sd = 5)
labs<-paste(1:40,month.abb)
new.coords<-jit.repel(x,y)
plot(x,y)
arrows(x,y,new.coords[,1],new.coords[,2],
length = 0,xpd=T,col="grey50")
text(new.coords,labels = labs,xpd=T)
plot(x,y,pch=16,col="grey50")
arrows(x,y,new.coords[,1],new.coords[,2],
length = 0,xpd=T,col="grey50")
text(new.coords,labels = labs,xpd=T)
x<-rnorm(1:40,mean = 1,sd = 0.1)
y<-rnorm(1:40,mean = 100,sd = 5)
labs<-paste(1:40,month.abb) #
new.coords<-jit.repel(x,y)
plot(x,y,pch=16,col="grey50")
arrows(x,y,new.coords[,1],new.coords[,2],
length = 0,xpd=T,col="grey50")
text(new.coords,labels = labs,xpd=T)
new.coords<-jit.repel(x,y)
plot(x,y,pch=16,col="grey50")
arrows(x,y,new.coords[,1],new.coords[,2],
length = 0,xpd=T,col="grey50")
text(new.coords,labels = labs,xpd=T)
plot(x,y,pch=16,col="grey40",bty="n")
arrows(x,y,new.coords[,1],new.coords[,2],
length = 0,xpd=T,col="grey40")
text(new.coords,labels = labs,xpd=T)
new.coords<-jit.repel(x,y) #jitter new point label coordinates
plot(x,y,pch=16,col="grey40",bty="n")
arrows(x,y,new.coords[,1],new.coords[,2],
length = 0,xpd=T,col="grey40")
text(new.coords,labels = labs,xpd=T)
library(roxygen2)
library(devtools)
document()
devtools::load_all(".")
library(FunFunctions)
detach("package:FunFunctions", unload = TRUE)
library(FunFunctions)
ls.mem<-function(format="MB"){
sapply(ls(),function(x) format(object.size(get(x)),format))
}
ls.mem()
print(to.show[order(to.show)])
ls.mem<-function(format="MB"){
to.show<-sapply(ls(),function(x) format(object.size(get(x)),format))
print(to.show[order(to.show)])
}
ls.mem()
